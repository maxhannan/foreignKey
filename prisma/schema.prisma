// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


model Account {
id                 String  @id @default(cuid())
userId             String
type               String
provider           String
providerAccountId  String
refresh_token      String? @db.Text
access_token       String? @db.Text
expires_at         Int?
token_type         String?
scope              String?
id_token           String? @db.Text
session_state      String?
oauth_token_secret String?
oauth_token        String?

user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@unique([provider, providerAccountId])
}

model Session {
id           String   @id @default(cuid())
sessionToken String   @unique
userId       String
expires      DateTime
user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
id            String    @id @default(cuid())
name          String?
email         String?   @unique
emailVerified DateTime?
username String? @unique
image         String?
accounts      Account[]
sessions      Session[]
posts         Post[]
comments      Comment[]
likes         Like[]
savedPosts    Post[]    @relation("SavedPosts")
}

model VerificationToken {
identifier String
token      String   @unique
expires    DateTime

@@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  subtitle  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  featuredImgSrc String
  featuredImgBlurHash String
  content   Json?  
  published Boolean  @default(false)
   author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  tags      Tag[]    
  comments  Comment[]
  likes     Like[]
  savedBy   User[]   @relation("SavedPosts")
  views     Int      @default(0)
}

model Tag {
  id    String @id @default(cuid())
  name  String
  posts Post[] 
}

model Like {
  id        String   @id @default(cuid())
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

}
